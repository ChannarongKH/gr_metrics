{
    "contents" : "#' Boxplots of a given GR metric\n#'\n#' This function takes in a data frame generated by GRfit and creates boxplots\n#' according to the parameters below.\n#'\n#' @param fitData an element of class GRfit, generated by the GRfit function.\n#' @param GRmetric the GR metric that want to use for the boxplot (GR50, GRinf,\n#' Hill, GRmax, GEC50, or GR_AOC)\n#' @param groupVariable the name of the variable from data (e.g. drug,\n#' cell-line, etc.) to select factors from.\n#' @param pointColor a variable that defines the coloring of the points\n#' overlayed on the boxplot.\n#' @param factors a vector of values of \"groupVariable\" of data that define\n#' which variables to make boxplots for. By default, a separate boxplot is made\n#' for each unique value of groupVariable.\n#' @param plotly a logical value indicating whether to output a ggplot2 graph\n#' or an interactive ggplotly graph\n#'\n#' @return ggplot2 or ggplotly boxplots of the factors along the x-axis, with\n#' points colored by the given variable.\n#' @author Nicholas Clark\n#' @details\n#' Given an object created by \\code{\\link{GRfit}}, this function creates\n#' boxplots of a given GR metric (GR50, GRmax, etc.) for values of\n#' the grouping variable. The results can be viewed in a static ggplot image or an\n#' interactive plotly graph.\n#'\n#' By default, a boxplot is created for all unique\n#' values of the grouping variable. The \"factors\" parameter can be used to\n#' specify a smaller subset of values for which to create boxplots.\n#' Points are overlayed on the boxplots and\n#' they can be colored by the variable specified in the pointColor parameter.\n#' If pointColor is set to NULL, the points will all be black. The results can\n#' be viewed in a static ggplot image or an interactive plotly graph.\n#' @seealso To create the object needed for this function, see\n#' \\code{\\link{GRfit}}. For other visualizations, see \\code{\\link{GRdrawDRC}}\n#' and \\code{\\link{GRscatter}}. For online GR calculator and browser, see\n#' \\url{http://www.grcalculator.org}.\n#' @examples\n#' # Load Case A (example 1) input\n#' data(\"inputCaseA\")\n#' head(inputCaseA)\n#' # Run GRfit function with case = \"A\"\n#' output1 = GRfit(inputData = inputCaseA, groupingVariables = c('cell_line','agent', 'perturbation','replicate', 'time'))\n#' GRbox(output1, GRmetric ='GRinf', groupVariable = 'cell_line', pointColor = 'agent' , factors = c('BT20', 'MCF10A'))\n#' GRbox(output1, GRmetric ='GRinf', groupVariable = 'cell_line', pointColor = 'cell_line' , factors = c('BT20', 'MCF10A'), plotly = F)\n#' @export\n\nGRbox <- function(fitData, GRmetric, groupVariable, pointColor, factors = \"all\", plotly = T) {\n  data = fitData$parameter_table\n  data[[groupVariable]] = factor(data[[groupVariable]])\n  if(factors != \"all\") {\n    if(length(intersect(factors, data[[groupVariable]])) != length(factors)) {\n      stop('Factors must be values of the grouping variable')\n    }\n    data = data[data[[groupVariable]] %in% factors, ]\n  }\n  if(plotly == T) {\n    p <- ggplot2::ggplot(data, ggplot2::aes_string(x = groupVariable, y = GRmetric, text = 'experiment'))\n    p = p + ggplot2::geom_boxplot(ggplot2::aes_string(fill = groupVariable, alpha = 0.3), outlier.color = NA, show.legend = F) + ggplot2::geom_jitter(width = 0.5, show.legend = F, ggplot2::aes_string(colour = pointColor)) + ggplot2::xlab('') + ggplot2::ylab(GRmetric)\n    q = plotly::plotly_build(p)\n    #     for(i in 1:length(q$data)){\n    #       q$data[[i]]$text = gsub('x_factor', input$pick_box_x, p$data[[i]]$text)\n    #       q$data[[i]]$text = gsub('y_variable', input$pick_box_y, p$data[[i]]$text)\n    #     }\n    #q$layout$xaxis$tickangle = -90\n    #q$layout$margin$b = 200\n    return(q)\n  } else {\n    p <- ggplot2::ggplot(data, ggplot2::aes_string(x = groupVariable, y = GRmetric))\n    p = p + ggplot2::geom_boxplot(ggplot2::aes_string(fill = groupVariable, alpha = 0.3), outlier.color = NA, show.legend = F) + ggplot2::geom_jitter(width = 0.5, ggplot2::aes_string(colour = pointColor)) + ggplot2::xlab('') + ggplot2::ylab(GRmetric)\n    return(p)\n  }\n}\n",
    "created" : 1466176673045.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "563199208",
    "id" : "6C38722E",
    "lastKnownWriteTime" : 1466176890,
    "path" : "~/Desktop/Git/Public Github/GRmetrics/R/GRbox.R",
    "project_path" : "R/GRbox.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}