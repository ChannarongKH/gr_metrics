{
    "contents" : "#' Scatterplot of a given GR metric\n#'\n#' This function takes in a data frame generated by GRfit and creates a scatterplot\n#' according to the parameters below.\n#'\n#' @param fitData an element of class GRfit, generated by the GRfit function.\n#' @param GRmetric the GR metric that want to use for the scatterplot (GR50,\n#' GRinf, Hill, GRmax, GEC50, or GR_AOC)\n#' @param variable The name of the variable from data (e.g. drug, cell-line,\n#' etc.) to select factors from.\n#' @param xaxis a vector of values of \"variable\" of data to be used for the scatterplot's x-axis\n#' @param yaxis a vector of values of \"variable\" of data to be used for the scatterplot's y-axis\n#' @param plotly a logical value indicating whether to output a ggplot2 graph or a ggplotly graph\n#'\n#' @return a ggplot2 or ggplotly scatterplot of the x-axis variable(s) versus\n#' the y-axis variable(s) for the given GR metric\n#' @author Nicholas Clark\n#' @details\n#' Given an object created by \\code{\\link{GRfit}}, this function creates\n#' a scatterplot of a given GR metric (GR50, GRmax, etc.) with the \"xaxis\"\n#' values plotted against the \"yaxis\" values. The results can be viewed in a\n#' static ggplot image or an interactive plotly graph.\n#'\n#' The xaxis and yaxis vectors must be of the same length or at least one must\n#' be of length one. For each pair of values xaxis[i] and yaxis[i], the\n#' function will create a scatterplot (all on one graph) of the specified GR\n#' metric. If a vector is of length one, it will be repeated to the length of\n#' the other vector.\n#' @export\n#' @seealso To create the object needed for this function, see\n#' \\code{\\link{GRfit}}. For other visualizations, see \\code{\\link{GRdrawDRC}}\n#' and \\code{\\link{GRbox}}. For online GR calculator and browser, see\n#' \\url{http://www.grcalculator.org}.\n#' @examples\n#' # Load Case A (example 1) input\n#' data(\"inputCaseA\")\n#' head(inputCaseA)\n#' # Run GRfit function with case = \"A\"\n#' output1 = GRfit(inputData = inputCaseA, groupingVariables = c('cell_line','agent', 'perturbation','replicate', 'time'))\n#' GRscatter(output1, 'GR50', 'agent', c('drugA','drugD'), 'drugB')\n#' GRscatter(output1, 'GR50', 'agent', c('drugA','drugD'), 'drugB', plotly = F)\n\nGRscatter = function(fitData, GRmetric, variable, xaxis, yaxis, plotly = T) {\n  if(length(xaxis) != length(yaxis)) {\n    if(length(xaxis) == 1) {\n      xaxis = rep(xaxis, length(yaxis))\n    } else if (length(yaxis) == 1) {\n      yaxis = rep(yaxis, length(xaxis))\n    } else {\n      stop('xaxis and yaxis must be of the same length or one must be of length 1')\n    }\n  }\n  data = fitData$parameter_table\n  if(GRmetric == 'GR50') {\n    data$log10GR50 = log10(data$GR50)\n    GRmetric = 'log10GR50'\n  } else if(GRmetric == 'Hill') {\n    data$`log2Hill` = log2(data$Hill)\n    GRmetric = 'log2Hill'\n  }\n  all_data = NULL\n  for(i in 1:length(xaxis)) {\n    xaxis_data = data[data[[variable]] == xaxis[i],]\n    yaxis_data = data[data[[variable]] == yaxis[i],]\n    # removing the selected xaxis and yaxis values from the \"experiment\" column for merging\n    temp1 = sub(xaxis[i], '', xaxis_data$experiment)\n    temp1 = sub('  ', ' ', temp1)\n    xaxis_data$merge = temp1\n\n    temp2 = sub(yaxis[i], '', yaxis_data$experiment)\n    temp2 = sub('  ', ' ', temp2)\n    yaxis_data$merge = temp2\n\n    merge_data = merge(xaxis_data, yaxis_data, by = 'merge')\n    merge_data$cross = as.factor(paste(xaxis[i], 'x', yaxis[i], sep = ' '))\n    all_data = rbind(all_data, merge_data)\n  }\n\n  x_data = paste0(GRmetric,'.x')\n  y_data = paste0(GRmetric,'.y')\n\n  ## Get rid of infinite values\n  test_finite_x = which(is.finite( all_data[[x_data]] ))\n  test_finite_y = which(is.finite( all_data[[y_data]] ))\n  test_finite = intersect(test_finite_x, test_finite_y)\n  all_data = all_data[test_finite,]\n\n  padding = 0.05\n  scatter_values = c(all_data[[x_data]], all_data[[y_data]])\n  ## Get rid of any infinite values\n  finite_values = which(is.finite(scatter_values))\n  scatter_values = scatter_values[finite_values]\n  x_min = min(scatter_values, na.rm = T)\n  x_max = max(scatter_values, na.rm = T)\n  y_min = min(scatter_values, na.rm = T)\n  y_max = max(scatter_values, na.rm = T)\n  all_max = max(abs(c(x_max, y_max, x_min, y_min)), na.rm = T)\n  all_range = 2*all_max\n  all_max = all_max + padding*all_range\n  all_min = -all_max\n\n  p = ggplot2::ggplot(data = all_data, ggplot2::aes_string(x = x_data, y = y_data, colour = 'cross', text = 'merge')) + ggplot2::geom_point(size=2)+ ggplot2::geom_abline(slope = 1, intercept = 0, size = .25) + ggplot2::coord_fixed() + ggplot2::scale_x_continuous(limits = c(all_min, all_max)) + ggplot2::scale_y_continuous(limits = c(all_min, all_max)) + ggplot2::coord_fixed()\n\n  if(GRmetric == 'log10GR50') {\n    p = p + ggplot2::ggtitle(\"GR50 Scatterplot (log10)\") + ggplot2::labs(colour = \"\") + ggplot2::xlab(\"log10(GR50)\") + ggplot2::ylab(\"log10(GR50)\")\n  } else if(GRmetric == 'log2Hill') {\n    p = p + ggplot2::ggtitle(\"Hill Slope Scatterplot (log2)\") + ggplot2::labs(colour = \"\") + ggplot2::xlab(\"log2(Hill Slope)\") + ggplot2::ylab(\"log2(Hill Slope)\")\n  } else {\n    p = p + ggplot2::ggtitle(paste(GRmetric, \"Scatterplot\")) + ggplot2::labs(colour = \"\") + ggplot2::xlab(GRmetric) + ggplot2::ylab(GRmetric)\n  }\n  if(plotly == T) {\n    q = plotly::ggplotly(p)\n    return(q)\n  } else {\n    return(p)\n  }\n}\n",
    "created" : 1466176679754.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4110990083",
    "id" : "89E90D95",
    "lastKnownWriteTime" : 1466176912,
    "path" : "~/Desktop/Git/Public Github/GRmetrics/R/GRscatter.R",
    "project_path" : "R/GRscatter.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}