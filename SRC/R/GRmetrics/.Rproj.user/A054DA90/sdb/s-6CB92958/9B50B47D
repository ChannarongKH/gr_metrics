{
    "contents" : "#' Dose-Response Curves\n#'\n#' This function plots the Growth-rate inhibition dose-response curves for a\n#' given set of data.\n#'\n#' @param fitData an element of class GRfit, generated by the GRfit function.\n#' @param experiments the names of the experiments to plot (or \"all\")\n#' @param min the minimum concentration to plot (for curves)\n#' @param max the maximum concentration to plot (for curves)\n#' @param points a logical value indicating whether points (individual GR values) will be plotted\n#' @param curves a logical value indicating whether sigmoidal dose-response curves will be plotted\n#' @param plotly a logical value indicating whether to output a ggplot2 graph or a ggplotly graph\n#'\n#' @return ggplot2 or ggplotly graphs of Growth-rate inhibition dose-response curves\n#' @author Nicholas Clark\n#' @details\n#' Given an object created \\code{\\link{GRfit}}, this function plots these GR\n#' values (versus concentration) and/or the sigmoidal curves fitted to the\n#' sets of points. The results can be viewed in a static ggplot image or an\n#' interactive plotly graph.\n#'\n#' The \"min\" and \"max\" parameters control the concentration values for which\n#' the curves are plotted. They are automatically set to the minimum and\n#' maximum concentrations of the data, but can be set by the user as well.\n#' \"min\" and \"max\" take raw values (not log transformed) for concentration.\n#'\n#' By default, curves and points are plotted for all experiments. To specify\n#' a smaller set of experiments, use the \"experiments\" parameter. To see the\n#' names of individual experiments, use\n#' \\code{GRfitObject$parameter_table$experiment}. See the examples below.\n#' @seealso To create the object needed for this function, see\n#' \\code{\\link{GRfit}}. For other visualizations, see \\code{\\link{GRbox}} and\n#' \\code{\\link{GRscatter}}. For online GR calculator and browser, see\n#' \\url{http://www.grcalculator.org}.\n#' @examples\n#' # Load Case A (example 1) input\n#' data(\"inputCaseA\")\n#' # Run GRfit function with case = \"A\"\n#' drc_output = GRfit(inputCaseA, groupingVariables = c('cell_line','agent'))\n#' GRdrawDRC(drc_output, plotly = F)\n#' GRdrawDRC(drc_output, experiments = c('BT20 drugA', 'MCF10A drugA', 'MCF7 drugA'), min = 10^(-4), max = 10^2)\n#' @export\n\nGRdrawDRC <- function(fitData, experiments = \"all\", min = \"auto\", max = \"auto\", points = T, curves = T, plotly = T) {\n  if(points == F & curves == F) {\n    stop('You must show either points or curves or both')\n  }\n  data = fitData$gr_table\n  parameterTable = fitData$parameter_table\n  groupingVariables = fitData$groupingVariables\n  data$log10_concentration = log10(data$concentration)\n  tmp<-data[,groupingVariables, drop = F]\n  experimentNew = (apply(tmp,1, function(x) (paste(x,collapse=\" \"))))\n  if(length(groupingVariables) > 0) {\n    data$experiment = as.factor(experimentNew)\n  } else {\n    data$experiment = as.factor(\"All Data\")\n  }\n  if(experiments != \"all\") {\n    parameterTable = parameterTable[parameterTable$experiment %in% experiments, ]\n    data = data[data$experiment %in% experiments, ]\n  }\n  exps = unique(parameterTable$experiment)\n  if(min == \"auto\") {\n    min_conc = min(data$concentration, na.rm = T)\n  } else {\n    min_conc = min\n  }\n  if(max == \"auto\") {\n    max_conc = max(data$concentration, na.rm = T)\n  } else {\n    max_conc = max\n  }\n  len = (log10(max_conc) - log10(min_conc))*100\n  Concentration = 10^(seq(log10(min_conc) - 1, log10(max_conc) + 1, length.out = len))\n  curve_data_all = NULL\n  for(exp in exps) {\n    row = which(parameterTable$experiment == exp)\n    EC50 = parameterTable$GEC50[row]\n    GRinf = parameterTable$GRinf[row]\n    Hill = parameterTable$Hill[row]\n    logistic_3u = function(c){GRinf + (1 - GRinf)/(1 + (c/EC50)^Hill)}\n    curve_data = as.matrix(Concentration)\n    colnames(curve_data) = \"Concentration\"\n    if(parameterTable$fit[row] == \"sigmoid\") {\n      GR = apply(curve_data, 1, logistic_3u)\n    } else {\n      GR = parameterTable$flat_fit[row]\n    }\n    curve_data = cbind(curve_data, GR)\n    curve_data = as.data.frame(curve_data)\n    curve_data$experiment = exp\n    if(is.null(curve_data_all)){\n      curve_data_all = curve_data\n    } else {\n      curve_data_all = rbind(curve_data_all, curve_data)\n    }\n  }\n  curve_data_all$experiment = as.factor(curve_data_all$experiment)\n\n  if(points == T & curves == F) {\n    p = ggplot2::ggplot(data = data, ggplot2::aes(x = log10_concentration, y = GR, colour = experiment)) + ggplot2::geom_point()\n  } else if(points == F & curves == T) {\n    p = ggplot2::ggplot(data = curve_data_all, ggplot2::aes(x = log10(Concentration), y = GR, colour = experiment)) + ggplot2::geom_line()\n  } else if(points == T & curves == T) {\n    p = ggplot2::ggplot() + ggplot2::geom_line(data = curve_data_all, ggplot2::aes(x = log10(Concentration), y = GR, colour = experiment)) + ggplot2::geom_point(data = data, ggplot2::aes(x = log10_concentration, y = GR, colour = experiment))\n  }\n  p = p + ggplot2::coord_cartesian(xlim = c(log10(min_conc)-0.1, log10(max_conc)+0.1), ylim = c(-1, 1.5), expand = T) + ggplot2::ggtitle(\"Concentration vs. GR values\") + ggplot2::xlab('Concentration (log10 scale)') + ggplot2::ylab('GR value') + ggplot2::labs(colour = \"\") + ggplot2::geom_hline(yintercept = 1, size = .25) + ggplot2::geom_hline(yintercept = 0, size = .25) + ggplot2::geom_hline(yintercept = -1, size = .25)\n\n  if(plotly == T) {\n    q = plotly::ggplotly(p)\n    return(q)\n  } else {\n    return(p)\n  }\n}\n",
    "created" : 1466176674602.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "577786541",
    "id" : "9B50B47D",
    "lastKnownWriteTime" : 1466190400,
    "path" : "~/Desktop/Git/Public Github/GRmetrics/R/GRdrawDRC.R",
    "project_path" : "R/GRdrawDRC.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}